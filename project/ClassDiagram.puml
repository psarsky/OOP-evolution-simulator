@startuml

class WorldGUI {
    + void main(String[] args)
}



interface WorldElement {
    + boolean isAt(Vector2d position)
    + Vector2d getPos()
}

class Animal {
    - MapDirection direction
    - Vector2d position
    - int energy
    - int age
    - List<Integer> genes
    - int activeGeneIndex
    + Animal(int x, int y, int energy, int orientation, List<Integer> genes)
    + void move()
    + void rotate()
    + void activateNextGene()
    + int getCurrentGene()
    + void consumePlant(Field field)
    + Animal reproduce(Animal partner)
    - void mutateGenome()
}

class Plant {
    - Vector2d position
    + Plant(Vector2d position)
    + String toString()
    + Vector2d getPos()
}

class Water {
    - Vector2d position
    + Water(Vector2d position)
    + String toString()
    + Vector2d getPos()
}



interface MoveValidator {
    + boolean canMoveTo(Vector2d position)
}

interface WorldMap {
    + void place(Animal animal) throws IncorrectPositionException
    + void move(Animal animal, MoveDirection direction)
    + boolean isOccupied(Vector2d position)
    + boolean withinBoundaries(Vector2d position)
    + WorldElement objectAt(Vector2d position)
    + List<WorldElement> getElements()
    + Boundary getCurrentBounds()
    + UUID getID()
}

abstract class AbstractWorldMap {
    # Vector2d lowerLeft
    # Vector2d upperRight
    # HashMap<Vector2d, Animal> animals
    # MapVisualizer mapVisualizer
    # List<MapChangeListener> observers
    # UUID id
    + AbstractWorldMap()
    + void growPlants()
    + void addObserver(MapChangeListener observer)
    + void removeObserver(MapChangeListener observer)
    - void notifyObservers(String message)
    + String toString()
    + boolean canMoveTo(Vector2d position)
    + void place(Animal animal) throws IncorrectPositionException
    + void move(Animal animal, MoveDirection direction)
    + boolean isOccupied(Vector2d position)
    + boolean withinBoundaries(Vector2d position)
    + WorldElement objectAt(Vector2d position)
    + List<WorldElement> getElements()
    + UUID getID()
}

class Globe {
    - Map<Vector2d, Plant> initialPlants
    + Globe(int width, int height, int plantCount)
    + WorldElement objectAt(Vector2d position)
    + List<WorldElement> getElements()
    + Boundary getCurrentBounds()
}

class WaterWorld {
    - Map<Vector2d, Plant> initialPlants
    - Map<Vector2d, Plant> initialWater
    + WaterWorld(int width, int height, int plantCount, int waterCount)
    + void waterChange()
    + WorldElement objectAt(Vector2d position)
    + List<WorldElement> getElements()
    + Boundary getCurrentBounds()
}



interface MapChangeListener {
    + void mapChanged(WorldMap worldMap, String message)
}

class SimulationPresenter {
    - GridPane mapGrid
    - Label moveDescription
    - TextField moveList
    - WorldMap map
    + void startSimulation()
    + void mapChanged(WorldMap worldMap, String message)
    + void drawMap()
    - void clearGrid()
    + void setWorldMap(WorldMap worldMap)
}



class SimulationParameters {
    - WorldMap map
    - boolean animalBehaviorVariant
    - int plantAmount
    - int waterAmount
}

class Simulation {
    - SimulationParameters params
    - List<Animal> animals
    + Simulation(Configuration params)
    + void run()
    + String toString()
    + Animal getAnimal(int index)
}

class SimulationApp {
    + void start(Stage primaryStage) throws IOException
    - void configureStage(Stage primaryStage, BorderPane viewRoot)
}

class SimulationEngine {
    - List<Simulation> simulations
    - List<Thread> threads
    - ExecutorService threadPool
    + SimulationEngine(List<Simulation> simulations)
    + void runSync()
    + void runAsync()
    + void runAsyncInThreadPool()
    + void awaitSimulationsEnd()
}



class Boundary {
    + Vector2d lowerLeft
    + Vector2d upperRight
}

class IncorrectPositionException {
    + IncorrectPositionException(Vector2d position)
}

enum MapDirection {
    NORTH
    NORTHEAST
    EAST
    SOUTHEAST
    SOUTH
    SOUTHWEST
    WEST
    NORTHWEST

    + MapDirection next()
    + MapDirection previous()
    + Vector2d toUnitVector()
    + String toString()
}

enum MoveDirection {
    FORWARD
    BACKWARD
    RIGHT
    LEFT
}

class OptionsParser {
    + static List<MoveDirection> parse(String[] args)
}

class RandomPositionGenerator {
    - List<Vector2d> positions
    + RandomPositionGenerator(int maxWidth, int maxHeight, int count)
    + Iterator<Vector2d> iterator()
    + Vector2d getHead()
    + Vector2d getTail()
    + int getIndex(Vector2d pos)
    + Vector2d getPos(int index)
}

class RandomPositionIterator {
    - RandomPositionGenerator generator
    - Vector2d current
    + RandomPositionIterator(RandomPositionGenerator generator)
    + boolean hasNext()
    + Vector2d next()
    + void remove()
}

class Vector2d {
    - int x
    - int y
    + Vector2d(int x, int y)
    + boolean precedes(Vector2d other)
    + boolean follows(Vector2d other)
    + Vector2d add(Vector2d other)
    + Vector2d subtract(Vector2d other)
    + Vector2d upperRight(Vector2d other)
    + Vector2d lowerLeft(Vector2d other)
    + Vector2d opposite()
    + String toString()
}



interface Runnable {}
class Application {}



Animal ..> WorldElement : <<implements>>
Plant ..> WorldElement : <<implements>>
Water ..> WorldElement : <<implements>>
WorldMap --> MoveValidator : <<extends>>
AbstractWorldMap ..> WorldMap : <<implements>>
Globe --> AbstractWorldMap : <<extends>>
WaterWorld --> AbstractWorldMap : <<extends>>
SimulationPresenter ..> MapChangeListener : <<implements>>
Simulation ..> Runnable : <<implements>>
SimulationApp --> Application : <<extends>>
IncorrectPositionException --> Exception : <<extends>>

RandomPositionGenerator --* RandomPositionIterator : <<contains>>

/'
SimulationApp --o SimulationPresenter : <<uses>>
SimulationEngine --o Simulation : <<uses>>
Boundary --o Vector2d : <<uses>>
IncorrectPositionException --o Vector2d : <<uses>>
MapDirection --o Vector2d : <<uses>>
MapVisualizer --o WorldMap : <<uses>>
MapVisualizer --o Vector2d : <<uses>>
'/



@enduml